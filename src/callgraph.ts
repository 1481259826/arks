/**
 * ArkUI Lifecycle Call Graph Data Structure
 *
 * This module provides a simple graph representation for function call sequences
 * extracted from ArkUI lifecycle analysis JSON output.
 */

/**
 * Represents a function node in the call graph
 */
export interface FunctionNode {
  /** Function name (e.g., "aboutToAppear", "build") */
  name: string;
  /** Scope of the function: "page" or "component" */
  scope: string;
  /** Description of the function's purpose */
  description: string;
}

/**
 * Represents a directed edge (call relationship) between two functions
 */
export interface Edge {
  /** Predecessor function name (caller) */
  pred: string;
  /** Successor function name (callee) */
  succ: string;
}

/**
 * Call graph data structure representing ArkUI lifecycle function calls
 */
export class CallGraph {
  private nodes: FunctionNode[];
  private edges: Edge[];
  private dynamicBehavior?: string;

  /**
   * Creates a new CallGraph instance
   * @param nodes - Array of function nodes
   * @param edges - Array of edges representing call relationships
   * @param dynamicBehavior - Optional description of dynamic behavior
   */
  constructor(nodes: FunctionNode[], edges: Edge[], dynamicBehavior?: string) {
    this.nodes = nodes;
    this.edges = edges;
    this.dynamicBehavior = dynamicBehavior;
  }

  /**
   * Constructs a CallGraph from a JSON string
   * @param jsonStr - JSON string in the format generated by Python RAG backend
   * @returns A new CallGraph instance
   * @throws Error if JSON parsing fails or required fields are missing
   */
  static fromJSON(jsonStr: string): CallGraph {
    try {
      const data = JSON.parse(jsonStr);

      // Validate required structure
      if (!data.lifecycle) {
        throw new Error("Missing 'lifecycle' field in JSON");
      }

      const { functions, order, dynamicBehavior } = data.lifecycle;

      if (!Array.isArray(functions)) {
        throw new Error("'functions' must be an array");
      }

      if (!Array.isArray(order)) {
        throw new Error("'order' must be an array");
      }

      // Parse nodes
      const nodes: FunctionNode[] = functions.map((fn: any) => ({
        name: fn.name,
        scope: fn.scope,
        description: fn.description,
      }));

      // Parse edges
      const edges: Edge[] = order.map((edge: any) => ({
        pred: edge.pred,
        succ: edge.succ,
      }));

      return new CallGraph(nodes, edges, dynamicBehavior);
    } catch (error) {
      if (error instanceof Error) {
        throw new Error(`Failed to parse JSON: ${error.message}`);
      }
      throw error;
    }
  }

  /**
   * Returns all function nodes in the graph
   */
  getNodes(): FunctionNode[] {
    return [...this.nodes];
  }

  /**
   * Returns all edges (call relationships) in the graph
   */
  getEdges(): Edge[] {
    return [...this.edges];
  }

  /**
   * Returns the dynamic behavior description if available
   */
  getDynamicBehavior(): string | undefined {
    return this.dynamicBehavior;
  }

  /**
   * Returns the number of nodes in the graph
   */
  getNodeCount(): number {
    return this.nodes.length;
  }

  /**
   * Returns the number of edges in the graph
   */
  getEdgeCount(): number {
    return this.edges.length;
  }
}
