/**
 * ArkUI Lifecycle Call Graph Data Structure
 *
 * This module provides a simple graph representation for function call sequences
 * extracted from ArkUI lifecycle analysis JSON output.
 */
/**
 * Call graph data structure representing ArkUI lifecycle function calls
 */
export class CallGraph {
    /**
     * Creates a new CallGraph instance
     * @param nodes - Array of function nodes
     * @param edges - Array of edges representing call relationships
     * @param dynamicBehavior - Optional description of dynamic behavior
     */
    constructor(nodes, edges, dynamicBehavior) {
        this.nodes = nodes;
        this.edges = edges;
        this.dynamicBehavior = dynamicBehavior;
    }
    /**
     * Constructs a CallGraph from a JSON string
     * @param jsonStr - JSON string in the format generated by Python RAG backend
     * @returns A new CallGraph instance
     * @throws Error if JSON parsing fails or required fields are missing
     */
    static fromJSON(jsonStr) {
        try {
            const data = JSON.parse(jsonStr);
            // Validate required structure
            if (!data.lifecycle) {
                throw new Error("Missing 'lifecycle' field in JSON");
            }
            const { functions, order, dynamicBehavior } = data.lifecycle;
            if (!Array.isArray(functions)) {
                throw new Error("'functions' must be an array");
            }
            if (!Array.isArray(order)) {
                throw new Error("'order' must be an array");
            }
            // Parse nodes
            const nodes = functions.map((fn) => ({
                name: fn.name,
                scope: fn.scope,
                description: fn.description,
            }));
            // Parse edges
            const edges = order.map((edge) => ({
                pred: edge.pred,
                succ: edge.succ,
            }));
            return new CallGraph(nodes, edges, dynamicBehavior);
        }
        catch (error) {
            if (error instanceof Error) {
                throw new Error(`Failed to parse JSON: ${error.message}`);
            }
            throw error;
        }
    }
    /**
     * Returns all function nodes in the graph
     */
    getNodes() {
        return [...this.nodes];
    }
    /**
     * Returns all edges (call relationships) in the graph
     */
    getEdges() {
        return [...this.edges];
    }
    /**
     * Returns the dynamic behavior description if available
     */
    getDynamicBehavior() {
        return this.dynamicBehavior;
    }
    /**
     * Returns the number of nodes in the graph
     */
    getNodeCount() {
        return this.nodes.length;
    }
    /**
     * Returns the number of edges in the graph
     */
    getEdgeCount() {
        return this.edges.length;
    }
}
//# sourceMappingURL=callgraph.js.map