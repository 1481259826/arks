/**
 * ArkUI Lifecycle Call Graph Data Structure
 *
 * This module provides a simple graph representation for function call sequences
 * extracted from ArkUI lifecycle analysis JSON output.
 */
/**
 * Represents a function node in the call graph
 */
export interface FunctionNode {
    /** Function name (e.g., "aboutToAppear", "build") */
    name: string;
    /** Scope of the function: "page" or "component" */
    scope: string;
    /** Description of the function's purpose */
    description: string;
}
/**
 * Represents a directed edge (call relationship) between two functions
 */
export interface Edge {
    /** Predecessor function name (caller) */
    pred: string;
    /** Successor function name (callee) */
    succ: string;
}
/**
 * Call graph data structure representing ArkUI lifecycle function calls
 */
export declare class CallGraph {
    private nodes;
    private edges;
    private dynamicBehavior?;
    /**
     * Creates a new CallGraph instance
     * @param nodes - Array of function nodes
     * @param edges - Array of edges representing call relationships
     * @param dynamicBehavior - Optional description of dynamic behavior
     */
    constructor(nodes: FunctionNode[], edges: Edge[], dynamicBehavior?: string);
    /**
     * Constructs a CallGraph from a JSON string
     * @param jsonStr - JSON string in the format generated by Python RAG backend
     * @returns A new CallGraph instance
     * @throws Error if JSON parsing fails or required fields are missing
     */
    static fromJSON(jsonStr: string): CallGraph;
    /**
     * Returns all function nodes in the graph
     */
    getNodes(): FunctionNode[];
    /**
     * Returns all edges (call relationships) in the graph
     */
    getEdges(): Edge[];
    /**
     * Returns the dynamic behavior description if available
     */
    getDynamicBehavior(): string | undefined;
    /**
     * Returns the number of nodes in the graph
     */
    getNodeCount(): number;
    /**
     * Returns the number of edges in the graph
     */
    getEdgeCount(): number;
}
